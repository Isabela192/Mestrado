
## You are using the Python ARM Radar Toolkit (Py-ART), an open source
## library for working with weather radar data. Py-ART is partly
## supported by the U.S. Department of Energy as part of the Atmospheric
## Radiation Measurement (ARM) Climate Research Facility, an Office of
## Science user facility.
##
## If you use this software to prepare a publication, please cite:
##
##     JJ Helmus and SM Collis, JORS 2016, doi: 10.5334/jors.119

import builtins as _mod_builtins

__builtins__ = {}
__doc__ = '\npyart.correct._fourdd_interface\n===============================\n\nCython wrapper around the University of Washington FourDD algorithm.\n\n.. autosummary::\n    :toctree: generated/\n\n    create_soundvolume\n    fourdd_dealias\n\n'
__file__ = '/home/isabela/anaconda3/envs/radar/lib/python3.6/site-packages/pyart/correct/_fourdd_interface.cpython-36m-x86_64-linux-gnu.so'
__name__ = 'pyart.correct._fourdd_interface'
__package__ = 'pyart.correct'
__test__ = _mod_builtins.dict()
def create_soundvolume():
    '\n    Create a RSL Volume containing sounding data.\n\n    Parameters\n    ----------\n    radialVelVolume : _RslVolume\n        Radial velocities which will be dealiased, shape used to create\n        soundvolume.\n    hc : ndarray\n        Sounding heights in meters.  Must be a contiguous one-dimensional\n        float32 array.\n    sc : ndarray\n        Sounding wind speed in m/s.  Must be a contiguous one-dimensional\n        float32 array.\n    dc : ndarray\n        Sounding wind direction in degrees.  Must be a contiguous\n        one-dimensional float32 array.\n    maxshear : float\n        Maximum vertical shear which will be incorperated into the created\n        volume.\n    sign : int\n        Sign convention which the radial velocities in the created volume\n        will follow.  A value of 1 represents when positive values\n        velocities are towards the radar, -1 represents when negative\n        velocities are towards the radar.\n\n    Returns\n    -------\n    usuccess : int\n        Flag indicating if loading of data was successful, 1 = yes, 0 = no.\n    soundvolume : _RslVolume\n        RslVolume containing sounding data.\n\n    '
    pass

def fourdd_dealias():
    '\n    fourdd_dealias(\n        radialVelVolume, lastVelVolume, soundVolume, filt,\n        compthresh=0.25, compthresh2=0.49, thresh=0.4,\n        epsilon=0.00001, ckval=1.0, stdthresh=0.8, maxcount=10, pass2=1,\n        rm=0, proximity=5, mingood=5, ba_mincount=5, ba_edgecount=3,\n        debug=False)\n\n    Dealias using the FourDD algorithm.\n\n    Parameters\n    ----------\n    radialVelVolume : _RslVolume\n        Radial velocities which will be dealiased.\n    lastVelVolume : _RslVolume or None\n        Radial velocities from a previously dealiased radar volume. For best\n        results, this radar should represent the previous volume scan in time.\n        If the last velocity volume is unavailable, set this to None.\n    soundVolume : _RslVolume or None\n        Volume created from sounding data.  If unavailable, set this to None.\n        soundVolume and lastVelVolume cannot both be None.\n    filt : int\n        Flag controlling Bergen and Albers filter, 1 = yes, 0 = no.\n\n    Other Parameters\n    ----------------\n    compthresh : float\n        Fraction of the Nyquist velocity to use as a threshold when performing\n        continity (initial) dealiasing.  Velocities differences above this\n        threshold will not be marked as gate from which to begin unfolding\n        during spatial dealiasing.\n    compthresh2 : float\n        The same as compthresh but the value used during the second pass of\n        dealasing.  This second pass is only performed in both a sounding\n        and last volume are provided.\n    thresh : float\n        Fraction of the Nyquist velocity to use as a threshold when performing\n        spatial dealiasing.  Horizontally adjacent gates with velocities above\n        this theshold will count against assigning the gate in question the\n        velocity value being tested.\n    ckval : float\n        When the absolute value of the velocities are below this value they\n        will not be marked as gates from which to begin unfolding during\n        spatial dealiasing.\n    stdthresh : float\n       Fraction of the Nyquist velocity to use as a standard deviation\n       threshold in the window dealiasing portion of the algorithm.\n    epsilon : float\n        Difference used when comparing a value to missing value, changing this\n        from the default is not recommended.\n    maxcount : int\n        Maximum allowed number of fold allowed when unfolding velocities.\n    pass2 : int\n        Controls weather unfolded gates should be removed (a value of 0)\n        or retained for unfolding during the second pass (a value of 1) when\n        both a sounding volume and last volume are provided.\n    rm : int\n        Determines what should be done with gates that are left unfolded\n        after the first pass of dealiasing.  A value of 1 will remove these\n        gates, a value of 0 sets these gates to their initial velocity.  If\n        both a sounding volume and last volume are provided this parameter is\n        ignored.\n    proximity : int\n        Number of gates and rays to include of either side of the current gate\n        during window dealiasing.  This value may be doubled in cases where\n        a standard sized window does not capture a sufficient number of\n        good valued gates.\n    mingood : int\n        Number of good valued gates required within the window before the\n        current gate will be unfolded.\n    ba_mincount : int\n        Number of neighbors required during Bergen and Albers filter for\n        a given gate to be included, must be between 1 and 8, 5 recommended.\n    ba_edgecount : int\n        Same as ba_mincount but used at ray edges, must be between 1 and 5,\n        3 recommended.\n    debug : bool\n        True to return RSL Volume objects for debugging:\n        usuccess, radialVelVolume, lastVelVolume, soundVolume, unfoldedVolume\n\n    Returns\n    -------\n    usuccess : int\n        Flag indicating if the unfolding was successful, 1 = yes, 0 = no.\n    data : np.ndarray\n        Array of unfolded velocities.\n\n    References\n    ----------\n    C. N. James and R. A Houze Jr, A Real-Time Four-Dimensional Doppler\n    Dealising Scheme, Journal of Atmospheric and Oceanic Technology, 2001, 18,\n    1674.\n\n    '
    pass

